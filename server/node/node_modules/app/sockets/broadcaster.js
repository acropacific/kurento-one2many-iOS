var fs             = require('fs');
var Promise        = require('bluebird');
var uuid           = require('uuid-v4');
var kurento        = require('app/kurento-client');
var isAuth         = require('app/auth/is-auth');
var bcmgr          = require('app/broadcasts/manager');
var makeSaveDir    = require('app/broadcasts/makeDir');
var toMp4          = require('app/broadcasts/toMp4');
var config         = require('app/config');
var getRoomName    = require('app/broadcasts/get-room-name');
var makeThumbnail  = Promise.promisify(require('app/broadcasts/make-thumbnail'));
var recordFormat   = config.video.format.record;
var playbackFormat = config.video.format.playback;
var setBroadcastingState = require('app/broadcasts/set-broadcasting-state');
var setProcessingState   = require('app/broadcasts/set-processing-state');
var getThumbnailPath = function(videoPath) {
  var parts = videoPath.split('.');
  parts.pop();
  parts.push('jpg');
  return parts.join('.');
};

module.exports = function(io, client) {

  var nsp = io.of('/broadcaster');
  nsp.on('connection', function(socket) {

    socket.on('offer', function(msg, cb) {

      // if (!sessionToken) {

      var broadcast = {
        socket: socket,
        id: uuid(),
        sessionToken: msg.sessionToken
      };

      isAuth(broadcast.sessionToken).then(function(auth) {
        // if (!auth) {
        return client.createAsync('MediaPipeline');
      }).then(function(pipeline) {
        Promise.promisifyAll(pipeline);
        broadcast.pipeline = pipeline;
        bcmgr.addIdle(broadcast);
        var endThis = endBroadcast.bind(null, broadcast.id);
        socket.once('disconnect', endThis);
        socket.once('error', endThis);
        return makeSaveDir(broadcast.id);
      }).then(function(savePath) {
        broadcast.file = savePath+'/'+broadcast.id+'.'+recordFormat;
        return broadcast.pipeline.createAsync('RecorderEndpoint', {
          mediaProfile: recordFormat.toUpperCase(),
          uri: 'file://'+broadcast.file
        });
      }).then(function(recorderEndpoint) {
        Promise.promisifyAll(recorderEndpoint);
        broadcast.recorderEndpoint = recorderEndpoint;
        return broadcast.pipeline.createAsync('WebRtcEndpoint');
      }).then(function(webRtcEndpoint) {
        Promise.promisifyAll(webRtcEndpoint);
        broadcast.webRtcEndpoint = webRtcEndpoint;
        var i = 0;
        webRtcEndpoint.on('OnIceCandidate', function(event) {
          console.log('OnIceCandidate', ++i);
          var candidate = kurento.register.complexTypes.IceCandidate(event.candidate);
          socket.emit('icecandidate', {
            candidate: candidate,
            broadcastId: broadcast.id
          });
        });
        return Promise.all([
          webRtcEndpoint.processOfferAsync(msg.offerSdp),
          webRtcEndpoint.gatherCandidatesAsync()
        ]);
      }).spread(function(answerSdp) {
        return Promise.all([
          answerSdp,
          broadcast.webRtcEndpoint.connectAsync(broadcast.recorderEndpoint)
        ]);
      }).spread(function(answerSdp) {
        console.log('broadcast accepted');
        cb(null, {
          broadcastId: broadcast.id,
          answerSdp: answerSdp
        });
      }).catch(function(err) {
        endBroadcast(broadcast.id);
        cb(err);
      });
    });

    socket.on('begin', function(msg, cb) {
      if (!bcmgr.ownsBroadcast(msg.broadcastId, msg.sessionToken)) { cb('auth'); }
      var broadcast = bcmgr.getBroadcast(msg.broadcastId);
      return broadcast.recorderEndpoint.recordAsync().then(function() {
        return setBroadcastingState(broadcast.id, true);
      }).then(function() {
        bcmgr.makeBroadcastLive(broadcast.id);
      }).asCallback(cb);
    });
    var j = 0;
    socket.on('icecandidate', function(msg) {
      console.log('icecandidate from browser', ++j);
      var broadcast = bcmgr.getBroadcast(msg.broadcastId);
      var candidate = kurento.register.complexTypes.IceCandidate(msg.candidate);
      broadcast.webRtcEndpoint.addIceCandidate(candidate);
    });

    socket.on('stop', function(msg, cb) {
      if (!bcmgr.ownsBroadcast(msg.broadcastId, msg.sessionToken)) { return cb('auth'); }
      endBroadcast(msg.broadcastId).asCallback(cb);
    });

    function endBroadcast(id) {
      var broadcast = bcmgr.getBroadcast(id);
      if (!broadcast) { return Promise.resolve(); }
      io.of('viewer').to('broadcast-'+id).emit('view-end', broadcast.id);
      var wasLive = bcmgr.isLive(id);
      bcmgr.removeBroadcast(id);
      if (!broadcast.pipeline) { return Promise.resolve(); }
      return broadcast.pipeline.releaseAsync().then(function() {
        if (!wasLive) { return true; }
        var actions = [
          setBroadcastingState(broadcast.id, false),
          //makeThumbnail(broadcast.file, getThumbnailPath(broadcast.file))
        ];
        if (recordFormat !== 'mp4' && playbackFormat === 'mp4') {
          actions.push(Promise.all([
            setProcessingState(broadcast.id, true),
            toMp4(broadcast.file)
          ]).then(function() {
            fs.unlink(broadcast.file); // delete old file
            return setProcessingState(broadcast.id, false);
          }).then(function() {
            io.of('/viewer').to('processing-'+broadcast.id).emit('processing-complete');
          }));
        }
        Promise.all(actions);
      }).catch(function(err) {
        console.log(err);
        setProcessingState(broadcast.id, false).then(function() {
          io.of('/viewer').to('processing-'+broadcast.id).emit('processing-failed');
        });
      });
    }

  });

};
